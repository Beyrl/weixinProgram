<!--pages/tip-3/tip-3.wxml-->
<view class="section-wrapper">
  <text class="section-title">{{cTitle}}</text>
  <view class="section-detail" >{{desc}}</view>
  <view class="section-content">
    <view class="section-main main1" wx:if="{{itemId == 0}}">
      <view class="code-wrapper">
        <view class="section-code">{{'<!'}}--正确的写法 --{{'>'}}</view>
        <view class="section-code">{{'<'}}text data-test="{{'{{'}}test{{'}}'}}"{{'>'}} hello world{{'</'}}text{{'>'}}</view>
      </view>
      <view class="code-wrapper">
        <view class="section-code">{{'<!'}}--错误的写法 --{{'>'}}</view>
        <view class="section-code">{{'<'}}text data-test={{'{{'}}test{{'}}'}}{{'>'}} hello world{{'</'}}text{{'>'}}</view>
      </view>
    </view>
    <view class="section-main main2" wx:if="{{itemId == 1}}">
      <view class="code-wrapper">
        <view class="section-code">{{'<!'}}--{w: 'w',W: 'W'} --{{'>'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}{{'{{'}}w{{'}}'}}{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}{{'{{'}}W{{'}}'}}{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'<!'}}--输出 w W --{{'>'}}</view>
      </view>
    </view>
    <view class="section-main main2" wx:if="{{itemId == 2}}">
      <view class="code-wrapper">
        <view class="section-code">{{'<!'}}--</view>
        <view class="section-code">{var2: undefined,</view>
        <view class="section-code">var3: null,</view>
        <view class="section-code">var4: "var4"}</view>
        <view class="section-code"> --{{'>'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}{{'{{'}}var1{{'}}'}}{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}{{'{{'}}var2{{'}}'}}{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}{{'{{'}}var3{{'}}'}}{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}{{'{{'}}var4{{'}}'}}{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'<!'}}--输出 null var4 --{{'>'}}</view>
      </view>
    </view>
    <view class="section-main main2" wx:if="{{itemId == 3}}">
      <text class="little-title">使用 wx:elif 和 wx:else 来添加一个 else 块：</text>
      <view class="code-wrapper">
        <view class="section-code">{{'<'}}view wx:if="{{'{{'}}length > 5{{'}}">'}}1{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'<'}}view wx:elif="{{'{{'}}length > 2{{'}}">'}}2{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'<'}}view wx:else{{'>'}}3{{'</'}}view{{'>'}}</view>
      </view>
      <text class="little-title">因为 wx:if 是一个控制属性，需要将它添加到一个标签上。如果要一次性判断多个组件标签，可以使用一个 标签将多个组件包装起来，并在上边使用 wx:if 控制属性。</text>
      <view class="code-wrapper">
        <view class="section-code">{{'<'}}block wx:if="{{'{{'}}true{{'}}">'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}view1{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}view2{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'</'}}block{{'>'}}</view>
      </view>
    </view>
    <view class="section-main main2" wx:if="{{itemId == 4}}">
      <view class="code-wrapper">
        <view class="section-code">{{'<!'}}-- array 是一个数组 --{{'>'}}</view>
        <view class="section-code">{{'<'}}view wx:for="{{'{{'}}array{{'}}">'}}</view>
        <view class="section-code">{{'{{'}} index{{'}}'}}: {{'{{'}}item.message{{'}}'}}</view>
        <view class="section-code">{{'</'}}view{{'>'}}</view>
      </view>
      <text class="little-title">数组当前项的变量名默认为<text class="span-text"> item</text></text>
      <text class="little-title">默认数组的当前项的下标变量名默认为 <text class="span-text">index</text></text>
    </view>
    <view class="section-main main2" wx:if="{{itemId == 5}}">
      <view class="code-wrapper">
        <view class="section-code">{{'<!'}}-- array 是一个数组 --{{'>'}}</view>
        <view class="section-code">{{'<'}}view wx:for="{{'{{'}}array{{'}}"'}}</view>
        <view class="section-code">wx:for-index="idx"</view>
        <view class="section-code">wx:for-item="itemName"{{'>'}}</view>
        <view class="section-code">{{'{{'}} idx{{'}}'}}: {{'{{'}}itemName.message{{'}}'}}</view>
        <view class="section-code">{{'</'}}view{{'>'}}</view>
      </view>
      <text class="little-title">使用<text class="span-text"> wx:for-item </text>指定数组当前元素的变量名 </text>
      <text class="little-title">使用<text class="span-text"> wx:for-index </text>指定数组当前下标的变量名 </text>
    </view>
    <view class="section-main main2" wx:if="{{itemId == 6}}">
     <view class="section-notice">如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 {{'<'}}input{{'/>'}}中的输入内容， <switch/> 的选中状态），需要使用 wx:key 来指定列表中项目的唯一的标识符。</view>
     <view class="little-title">wx:key 的值以两种形式提供：</view>
     <view class="little-title text-indent">1、字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</view>
     <view class="little-title text-indent">2、保留关键字 this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字，如：</view>
     <view class="section-notice">当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</view>
      <button class="button" type="default" bindtap="turntoSec">
        点击我跳转例子页面
      </button>
    </view>
    <view class="section-main main2" wx:if="{{itemId == 7}}">
      <view class="little-title text-indent">WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。使用 name 属性，作为模板的名字。然后在 {{'<'}}template{{'/>'}} 内定义代码片段，如：</view>
      <view class="code-wrapper">
        <view class="section-code">{{'<!'}}-- 定义模板 --{{'>'}}</view>
        <view class="section-code">{{'<'}}template name="msgItem"{{'/>'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}</view>
        <view class="section-code text-indent">{{'<'}}text{{'>'}} {{'{{'}}index{{'}}'}}: {{'{{'}}msg{{'}}'}} {{'</>'}}text{{'>'}}             </view>
        <view class="section-code text-indent">{{'<'}}text{{'>'}} Time: {{'{{'}}msg{{'}}'}} {{'</>'}}text{{'>'}}</view>
        <view class="section-code">{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'</'}}template{{'>'}}</view>
      </view>
      <view class="little-title text-indent">使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入：</view>
      <view class="code-wrapper">
        <view class="section-code">{{'<!'}}-- 使用模板实例 --{{'>'}}</view>
        <view class="section-code">{{'<!'}}--</view> 
        <view class="section-code">{ index: 0,</view>
        <view class="section-code"> msg: 'this is a template',</view>
        <view class="section-code"> time: '2016-06-18'}</view>
        <view class="section-code">--{{'>'}}</view>
        <view class="section-code">{{'<'}}template name="msgItem"{{'/>'}}</view>
        <view class="section-code">{{'<'}}view{{'>'}}</view>
        <view class="section-code text-indent">{{'<'}}text{{'>'}} {{'{{'}}index{{'}}'}}: {{'{{'}}msg{{'}}'}} {{'</>'}}text{{'>'}}</view>
        <view class="section-code text-indent">{{'<'}}text{{'>'}} Time: {{'{{'}}msg{{'}}'}} {{'</>'}}text{{'>'}}</view>
        <view class="section-code">{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'</'}}template{{'>'}}</view>
        <view class="section-code">{{'<!'}}-- 使用模板 --{{'>'}}</view>
        <view class="section-code">{{'<'}}template is="msgItem" data="{{'{{'}}...item{{'}}'}}"{{'/>'}}</view>
        <view class="section-code">{{'<!'}}--输出</view> 
        <view class="section-code">0: this is a template Time: 2016-06-18</view>
        <view class="section-code">--{{'>'}}</view>
      </view>
      <view class="little-title">is可以动态决定具体需要渲染哪个模板</view>
      <view class="code-wrapper">
        <view class="section-code">{{'<'}}template name="odd"{{'/>'}}</view>
        <view class="section-code text-indent">{{'<'}}view{{'>'}} odd{{'</'}}view{{'>'}}</view>
        <view class="section-code mgb30">{{'</'}}template{{'>'}}</view>
        <view class="section-code">{{'<'}}template name="even"{{'/>'}}</view>
        <view class="section-code text-indent">{{'<'}}view{{'>'}} even{{'</'}}view{{'>'}}</view>
        <view class="section-code">{{'</'}}template{{'>'}}</view>
        <view class="section-code">{{'<!'}}-- 使用 --{{'>'}}</view>
        <view class="section-code">{{'<'}}template is="{{'{{'}}item % 2 == 0 ? 'even' : 'odd'{{'}}'}}" {{'/>'}}</view>
        <view class="section-code">{{'<!'}}--输出</view> 
        <view class="section-code">odd even odd even odd</view>
        <view class="section-code">--{{'>'}}</view>
      </view>
    </view>
    <view class="section-main main2" wx:if="{{itemId == 8}}">
     <view class="little-title"><text class="span-text">Import</text></view>
     <view class="little-title text-indent">import 可以在该文件中使用目标文件定义的 template，如：在 item.wxml 中定义了一个叫 item的 template ：</view>
      <view class="code-wrapper">
        <view class="section-code">{{'<!'}}-- item.wxml --{{'>'}}</view>
        <view class="section-code">{{'<'}}template name="item"{{'>'}}</view>
        <view class="section-code">{{'<'}}text{{'>'}}{{'{{'}}text{{'}}'}}{{'</>'}}text{{'>'}}</view>
        <view class="section-code">{{'</'}}template{{'>'}}</view>
      </view>
     <view class="little-title text-indent">在 index.wxml 中引用了 item.wxml，就可以使用 item模板：</view>
      <view class="code-wrapper">
        <view class="section-code">{{'<'}}import src="item.wxml"{{'/>'}}</view>
        <view class="section-code">{{'<'}}template is="item" data="{{'{{'}}text: 'forbar'{{'}}'}}"{{'/>'}}</view>
      </view>
     <view class="section-notice">需要注意的是 import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件中 import 的 template，简言之就是 import 不具有递归的特性。例如：C 引用 B，B 引用A，在C中可以使用B定义的 template，在B中可以使用A定义的 template ，但是C不能使用A定义的template </view>
     <view class="little-title"><text class="span-text">include </text></view>
     <view class="little-title text-indent">include 可以将目标文件中除了 {{'{{'}}template{{'/>'}}{{'{{'}}wxs{{'/>'}} 外的整个代码引入，相当于是拷贝到 include 位置:</view>
     <image src="../../assets/image/tip2-1.png"></image>
    </view>
  </view>
</view>


